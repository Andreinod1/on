= On {<img src="https://secure.travis-ci.org/neopoly/on.png?branch=master" alt="Build Status" />}[https://travis-ci.org/neopoly/on]

Dynamic callbacks.

Gem[https://rubygems.org/gems/on] |
Source[https://github.com/neopoly/on] |
Documentation[http://rubydoc.info/github/neopoly/on/master/file/README.rdoc]

Inspired by http://www.mattsears.com/articles/2011/11/27/ruby-blocks-as-dynamic-callbacks

== Usage

Basic usage.

  require 'on'

  def tweet(message, &block)
    callback = On.new(:success, :failure, &block)
    callback.call :success
  rescue => e
    callback.call :failure, e.message
  end

  tweet "hello world" do |callback|
    callback.on :success do
      # handle success
    end
    callback.on :failure do |error_message|
      # handle error message
    end
  end


== Usage with proc

Syntatic sugar for creating an +on+ callback from Proc.

  require 'on/proc'

  def tweet(message, &block)
    callback = block.on(:success, :failure)
    callback.call :success
  rescue => e
    callback.call :failure, e.message
  end

  tweet "hello world" do |callback|
    callback.on :success do
      # handle success
    end
    callback.on :failure do |error_message|
      # handle error message
    end
  end

== Installation

Add this line to your application's Gemfile:

  gem 'on'

And then execute:

  $ bundle

Or install it yourself as:

  $ gem install on

== Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request
